性能问题

    对于需要集成到业务系统的框架来说，我们不希望框架本身代码的执行效率，对业务系统有太多性能上的影响。
    对于性能计数器这个框架来说，一方面，我们希望它是低延迟的，也就是说，统计代码不影响活很少影响接口本身的响应时间;
    另一方面，我们希望框架本身对内存的消耗不能太大。

    对于性能这一点，落实到具体的代码层面，需要解决两个问题，也是我们之前提到过的，一个采集和存储要异步来执行，因为存储基于外部存储(比如redis),
    会比较慢，异步存储可以降低对接口响应时间的影响。
    另一个是当需要聚合统计的数据量比较大的时候，一次性加载太多的数据到内存，有可能会导致内存吃紧，甚至内存溢出，这样整个系统都会瘫痪掉。

    针对第一个问题，我们可以用异步来解决。

    针对第二个问题，解决的思路比价哦简单，但代码实现稍微有点复杂。
    当统计的时间间隔较大的时候，需要统计的数据量就会比较大。
    我们可以将其划分为一些小的时间区间(比如10分钟作为一个统计单元),针对每个小的时间区间分别进行统计,
    然后将统计得到的结果在进行聚合，得到最终整个时间区间的统计结果。
    不过，这个思路只适合响应时间的 max、min、avg, 及其接口请求 count、tps 的统计，对于响应时间的 percentile 的统计并不适用。

    对于 percentile 的统计要稍微复杂一些，具体的解决思路是这样子的：
    我们分批从 redis 中读取数据，然后存储到文件中，再根据响应时间从小到大利用外部排序算法来进行排序;
    排序完成之后，再从文件中读取第 count*percentile (count 表示总的数据个数, percentile 就是百分比, 99 百分位就是 0.99)个数据，
    就是对应的 percentile 响应时间。

